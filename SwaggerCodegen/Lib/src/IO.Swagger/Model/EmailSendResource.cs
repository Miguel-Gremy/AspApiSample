/* 
 * AspApiSample.Web.API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// EmailSendResource
    /// </summary>
    [DataContract]
        public partial class EmailSendResource :  IEquatable<EmailSendResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailSendResource" /> class.
        /// </summary>
        /// <param name="email">email (required).</param>
        /// <param name="subject">subject (required).</param>
        /// <param name="htmlMessage">htmlMessage (required).</param>
        public EmailSendResource(string email = default(string), string subject = default(string), string htmlMessage = default(string))
        {
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new InvalidDataException("email is a required property for EmailSendResource and cannot be null");
            }
            else
            {
                this.Email = email;
            }
            // to ensure "subject" is required (not null)
            if (subject == null)
            {
                throw new InvalidDataException("subject is a required property for EmailSendResource and cannot be null");
            }
            else
            {
                this.Subject = subject;
            }
            // to ensure "htmlMessage" is required (not null)
            if (htmlMessage == null)
            {
                throw new InvalidDataException("htmlMessage is a required property for EmailSendResource and cannot be null");
            }
            else
            {
                this.HtmlMessage = htmlMessage;
            }
        }
        
        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [DataMember(Name="subject", EmitDefaultValue=false)]
        public string Subject { get; set; }

        /// <summary>
        /// Gets or Sets HtmlMessage
        /// </summary>
        [DataMember(Name="htmlMessage", EmitDefaultValue=false)]
        public string HtmlMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailSendResource {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  HtmlMessage: ").Append(HtmlMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmailSendResource);
        }

        /// <summary>
        /// Returns true if EmailSendResource instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailSendResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailSendResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) && 
                (
                    this.HtmlMessage == input.HtmlMessage ||
                    (this.HtmlMessage != null &&
                    this.HtmlMessage.Equals(input.HtmlMessage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Subject != null)
                    hashCode = hashCode * 59 + this.Subject.GetHashCode();
                if (this.HtmlMessage != null)
                    hashCode = hashCode * 59 + this.HtmlMessage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
